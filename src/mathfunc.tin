# math.tcl
################################################################################
# Tcl mathfunc commands for ND lists.

# Copyright (C) 2023 Alex Baker, ambaker1@mtu.edu
# All rights reserved. 

# See the file "LICENSE" in the top level directory for information on usage, 
# redistribution, and for a DISCLAIMER OF ALL WARRANTIES.
################################################################################

# Define namespace and exported commands
namespace eval ::ndlist {
    # Math functions over one list
    #
    # Syntax:
    # $func $arg <$nd>
    #
    # Arguments:
    # func      Math function
    # arg       ND list to map over
    # nd        Number of dimensions. Default 1.
    
    foreach func {abs acos asin atan bool ceil cos cosh double entier exp 
            floor int isqt log log10 pow round sin sinh sqrt tan tanh wide} {
        proc $func {arg {nd 1}} "MathFunc1 $func \$nd \$arg "
        namespace export $func
    }
    
    # Math functions over two lists
    #
    # Syntax:
    # $func $arg1 $arg2 <$nd>
    #
    # Arguments:
    # func          Math function
    # arg1 arg2     ND lists to map over
    # nd            Number of dimensions. Default 1.
    
    foreach func {atan2 fmod hypot pow} {
        proc $func {arg1 arg2 {nd 1}} "MathFunc2 $func \$nd \$arg1 \$arg2"
        namespace export $func
    }
    
    # Other mathfunc commands (max and min are in stat.tcl)
    namespace export rand srand; # Random number generation (no arguments)
}

# MathFunc1 --
#
# Perform math function over one ndlist.
#
# Syntax:
# MathFunc1 $func $nd $ndlist
#
# Arguments:
# func          Mathfunc command
# nd            Number of dimensions
# ndlist        ND list to map over

proc ::ndlist::MathFunc1 {func nd ndlist} {
    # Interpret input
    set ndims [GetNDims $nd]
    # Scalar case
    if {$ndims == 0} {
        return [::tcl::mathfunc::$func $ndlist]
    }
    # ND case
    napply $ndims ::tcl::mathfunc::$func $ndlist
}

# MathFunc2 --
#
# Perform math function over two ndlists
#
# Syntax:
# MathFunc2 $func $nd $ndlist1 $ndlist2 
#
# Arguments:
# func              Mathfunc command
# nd                Number of dimensions
# ndlist1 ndlist2   ND lists to map over


proc ::ndlist::MathFunc2 {func nd ndlist1 ndlist2} {
    # Interpret input
    set ndims [GetNDims $nd]
    # Scalar case
    if {$ndims == 0} {
        return [::tcl::mathfunc::$func $ndlist1 $ndlist2]
    }
    # ND case
    nmap $ndims value1 $ndlist1 value2 $ndlist2 {
        ::tcl::mathfunc::$func $value1 $value2
    }
}

# rand --
# 
# Generate a random ndlist of specified size
#
# Syntax:
# rand $n ...
#
# Arguments:
# n ...         Shape of resulting ndlist

proc ::ndlist::rand {args} {
    # Base case
    if {[llength $args] == 0} {
        return [::tcl::mathfunc::rand]
    }
    # Recursion
    set args [lassign $args n]
    lmap x [lrepeat $n {}] {
        rand {*}$args
    }
}

# srand --
# 
# Change the seed for the random number generator
#
# Syntax:
# srand $arg
#
# Arguments:
# arg           Integer to reset the rng seed. See ::tcl::mathfunc::srand

proc ::ndlist::srand {arg} {
    ::tcl::mathfunc::srand $arg
}
